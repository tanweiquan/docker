在编写好的项目中新建一个无任何格式的Dockerfile文件
在dockerfile中写上创建镜像的信息。
例子：
------------基础镜像信息------------
FROM ubuntu:14.04                                                        --->使用哪个镜像作为基础
------------维护者信息------------
MAINTAINER Docker Newbee <newbee@docker.com>  --->维护者的信息，也可以用LABEL来指定
------------镜像操作指令------------
RUN apt-get -qq update                                                 --->该指令会在创建中运行，比如下载/安装一个软件包，在这里使用 apt-get 来下载了一些软件
RUN apt-get -qqy install ruby ruby-dev                           --->该指令会在创建中运行，比如下载/安装一个软件包，这里下载并安装一些软件
RUN gem install sinatra                                                   --->该指令会在创建中运行，比如下载/安装一个软件包，在这里使用 install 来安装了一些软件
------------镜像操作指令------------
CMD /usr/sbin/nginx


创建镜像：docker build [选项] 路径
选项为-t  是要指定镜像的标签信息，指定为镜像名:镜像版本
路径为.  是当前目录
还可以用  .dockerignore 文件（每一行添加一条匹配模式）来让 Docker 忽略路径下的目录和文件。
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
FROM
构建镜像基于哪个镜像。
格式为：FROM <image>或FROM <image>:<tag>

MAINTAINER
镜像维护者姓名或邮箱地址。
格式为 MAINTAINER <name>

LABEL
指定镜像元数据，设置镜像的标签，可以指定镜像元数据，如: 镜像作者等。
格式为：LABEL  key=value
添加镜像的作者如：LABEL xxx.image.authors="yyy"

RUN
构建镜像时运行的指令。
两种格式为：
                RUN <命令行命令> 
                RUN ["可执行文件", "参数1", "参数2"]
如果一个RUN中执行多个命令，可以使用 && 连接，如果命令过长，可以使用 \ 换行
另外有
shell是用户和Linux内核之间的接口程序。shell有多种，例如有sh 和 bash ，其中bash是增强版的sh。
前者使用 sh，相当于"/bin/sh -c"；后者可以指定其他shell来运行，例如："/bin/bash"，指定参数"-c"，后面跟着要使用的命令"在该shell下的命令"
其中-c表示command，代表在该shell下使用命令。&&连接的命令表示两个命令都执行。

CMD
运行容器时执行的shell环境
三种格式：
            CMD ["要使用的shell","参数1","参数2"] 使用 exec 执行，推荐方式；
            CMD "可执行的文件或命令"参数1 参数2 在 /bin/sh 中执行，提供给需要交互的应用；
            CMD ["参数1","参数2"...]   提供给 ENTRYPOINT 的默认参数；
CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。
指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。

VOLUME
定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。
格式为：
VOLUME ["<路径1>", "<路径2>"...]
VOLUME <路径>

USER
为RUN、CMD、和 ENTRYPOINT 执行命令指定运行用户
格式为： USER <用户名>[:<用户组>]

WORKDIR
为后续的 RUN、CMD、ENTRYPOINT、COPY 和 ADD 设置工作目录，就是切换目录
格式为：WORKDIR <工作目录路径>

HEALTHCHECH
监控 docker 容器服务的运行状态
HEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令
HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令
HEALTHCHECK [选项] CMD <命令> : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。

ONBUILD
用于延迟构建命令的执行，本次构建镜像的过程中不会执行，当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build时，则执行的命令
格式：
ONBUILD <其它指令>

ARG
构建时指定的一些参数
格式：
ARG <参数名>[=<默认值>]

EXPOSE
声明容器的服务端口（仅仅是声明）
格式为 EXPOSE <容器端口1> [<容器端口2>...]。

ENV
设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。
即告诉系统运行程序时对象的值是多少，如果没有赋值在哪个路径找
给环境变量设值：
格式为：ENV <key>=<value> ...
当给环境变量设置寻找路径时：
格式为：ENV PATH　路径1:路径2 
以冒号:分割不同的路径

ADD   (相同的需求下，使用COPY)
拷贝文件或目录到容器中，如果是URL或压缩包便会自动下载或自动解压
格式为 ADD  "<源路径>" "<目标路径>"

COPY
拷贝文件或目录到容器中，跟ADD类似，但不具备自动下载或解压的功能。<源路径> <目标路径>
格式为：COPY [--chown=<user>:<group>] ["<源路径1>",...  "<目标路径>"]
[--chown=<新容器内文件拥有者>:<新容器内文件的组别>]：可选参数，用户改变复制到容器内文件的拥有者和属组。

ENTRYPOINT
运行容器时执行的shell命令
格式为：
ENTRYPOINT ["<要使用的shell>","<参数1>","<参数2>",...]
ENTRYPOINT command param1 param2（shell中执行）
配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖
只执行一条，如有多条，最新的一条会覆盖旧的。